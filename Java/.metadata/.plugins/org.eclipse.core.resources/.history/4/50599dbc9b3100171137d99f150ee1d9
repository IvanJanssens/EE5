package application;



import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.InputStream;
import java.util.LinkedList;
import java.util.Queue;

import communication.Connection;
import javafx.application.Platform;
import javafx.concurrent.Service;
import javafx.concurrent.Task;
import userinterface.OscilloscopeUI;
import userinterface.UI;

public class Oscilloscope extends Service<Object>{

	Connection connection;
	File tempFile;
	double trigger = 0;
	double max_data = 10;
	int attenuation = 2;
	public Oscilloscope(Connection connection, File tempFile) {
		this.connection = connection;
		this.tempFile = tempFile;
	}
	
	public void updateTrigger(double newValue) {
		trigger = newValue;
	}
	
	public void updateTimeDiv(double newValue) {
		max_data = newValue;
	}
	
	public void updateAttenuation(int newValue) {
		attenuation = newValue;
	}
	
	@Override
	protected Task<Object> createTask() {
		return new Task<Object>() {
			double result;
			Queue<Double> databuffer;
			BufferedWriter temp;
			@Override
			protected Object call() throws Exception {
				InputStream input = connection.getInputStream();
				
				System.out.println("testing2");
				connection.send(UI.OSCILLOSCOPE); //Send 9 to start the multimeter datastream
				int len = -1;
				result = 0;
				byte[] buffer = new byte[64];
				int[] intbuffer = new int[64];
				databuffer = new LinkedList<Double>();
				try {
					temp = new BufferedWriter(new FileWriter(tempFile,true));
					System.out.println("newMes");
					temp.write("New mesurement \n");
					while(! isCancelled()) {
						if(input.available() > 2 ) {
							len = input.read(buffer, 0, 3);
		            		for(int i = 0; i<len; i++){
		            			intbuffer[i] = buffer[i] & 0xFF;
		            		}
		            		if(len>1) {
		            			result = (double) (((intbuffer[1] << 2) |  (intbuffer[2] >> 6))*(5.11/1024)*attenuation);
		            			temp.write((String.format("%.3f", result) + "\n"));
		            			
		            			databuffer.add(result);
	            				Platform.runLater(new Runnable() {
			                    	@Override
			                    	public void run() {
			                    		try {
			                    			OscilloscopeUI.addData(databuffer.poll());
			                    		}
			                    		catch (Exception e) {
			                    			e.printStackTrace();
			                    		}
			                    	}
			                    });
		            			
		            			 
		            		}
		                   
		            	}
					}
					if(isCancelled()) {
						connection.send(UI.STOP);
						temp.flush();
						temp.close();
					}
				} catch (Exception e) {
					e.printStackTrace();
				}
				return null;
			}
			
			
		};
		
	}
}
