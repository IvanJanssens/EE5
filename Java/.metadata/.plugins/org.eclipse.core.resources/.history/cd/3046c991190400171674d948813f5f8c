package userinterface;

import javafx.beans.value.ChangeListener;
import javafx.beans.value.ObservableValue;
import javafx.scene.Scene;
import javafx.scene.control.Tab;
import javafx.scene.control.TabPane;
import javafx.scene.image.Image;
import javafx.stage.Stage;
import resource.ResourceLoader;
import application.Multimeter;
import application.Oscilloscope;
import communication.Connection;
import userinterface.MultimeterUI;
import userinterface.OscilloscopeUI;
import userinterface.GeneratorUI;

public class UI {

	public static Connection connection;
	public static final int MULTIMETER = '9';
	public static final int OSCILLOSCOPE = '8';
	public static final int STOP = '0';
	public static final int MAX_DATA = 1000;
	
	public static void start(Stage stage, Connection conn) {
		connection = conn;
		Stage mainStage = stage;

		System.out.println(ResourceLoader.class.getResourceAsStream("SineWave.png"));
		mainStage.getIcons().add(new Image(ResourceLoader.class.getResourceAsStream("SineWave.png"),15,0,true,true));
		mainStage.setTitle("LBMS");
		
		TabPane main = new TabPane();
		Scene scene = new Scene(main,900,600);
		main.setPrefSize(900.00,600.00);
		main.setTabClosingPolicy(TabPane.TabClosingPolicy.UNAVAILABLE);
		
		main.getTabs().add(OscilloscopeUI.Oscilloscope());
		main.getTabs().add(MultimeterUI.multimeter());
		main.getTabs().add(GeneratorUI.generator());

		Oscilloscope oscilloscope = new Oscilloscope(connection);
		Multimeter multimeter = new Multimeter(connection);
		

		main.getSelectionModel().selectedItemProperty().addListener(
				new ChangeListener<Tab>() {
					@Override
					public void changed(ObservableValue<? extends Tab> ov, Tab t, Tab t1) {
						try {
							if(t.getText().equals("Oscilloscope"))
								oscilloscope.cancel();
							else if(t.getText().equals("Multimeter"))
								multimeter.cancel();
							else if(t.getText().equals("Function generator"))
								System.out.println("close generator");
						} catch(Exception e) {
							e.printStackTrace();
						}
						if(t1.getText().equals("Oscilloscope"))
							oscilloscope.restart();
						else if(t1.getText().equals("Multimeter"))
							multimeter.restart();
						else if(t1.getText().equals("Function generator"))
							System.out.println("open generator");
					}
				}
			);
		mainStage.setOnCloseRequest(event -> {
				oscilloscope.cancel();
				multimeter.cancel();
				connection.close();
		});
		mainStage.setScene(scene);
		mainStage.show();
		oscilloscope.restart();
	}
}
