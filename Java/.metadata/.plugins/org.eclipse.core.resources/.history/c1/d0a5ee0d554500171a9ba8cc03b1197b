package userinterface;


import javafx.scene.chart.LineChart;
import javafx.scene.chart.NumberAxis;
import javafx.scene.chart.ValueAxis;
import javafx.scene.chart.XYChart;

public class GraphUI {

	private static XYChart.Series<Number, Number> dataA;
	private static XYChart.Series<Number, Number> dataB;
	private static double max;
	private static double min;
	private static double sum;
	private static int oldMaxData = 0;
	private static int tab;
	
	public static final int NoConUI = 0;
	public static final int OsciUI = 1; 
	
	//Linechart
		public static LineChart<Number, Number> osciGraph() {
			NumberAxis xAxis = new NumberAxis();
			NumberAxis yAxis = new NumberAxis();
			xAxis.setLabel("Time (s)");
			yAxis.setLabel("Voltage (V)");
			LineChart<Number, Number> graph = new LineChart<Number, Number>(xAxis,yAxis);
			graph.setTitle("Oscilloscope");
			dataA = new XYChart.Series<Number, Number>();
			dataA.setName("Oscilloscope 1");
			dataB = new XYChart.Series<Number, Number>();
			dataB.setName("Oscilloscope 2");
			graph.getData().add(dataA);
			graph.getData().add(dataB);
			graph.getXAxis().setAutoRanging(false);
			graph.getYAxis().setAutoRanging(false);
			graph.setMinWidth(400);
			graph.setMaxWidth(1000);
			graph.setAnimated(false);
			xAxis.setLowerBound(0.0);
			xAxis.setUpperBound(20);
			yAxis.setUpperBound(16.5);
			yAxis.setLowerBound(-16.5);
			return graph;
		}
		
		add data of channel A
		public static void addDataA(double newPoint,int startPoint, int maxData, int currentPoint, int tabFrom) {
			tab = tabFrom;
			//get number of datapoints
	        int numOfPoint = dataA.getData().size();
	        

			if(maxData <= oldMaxData) {
				dataA.getData().remove(maxData, dataA.getData().size());
			}

			((ValueAxis<Number>) dataA.getChart().getXAxis()).setLowerBound(startPoint);
	        ((ValueAxis<Number>) dataA.getChart().getXAxis()).setUpperBound((double)(maxData - startPoint)/maxData * 20);
	        
	        double pointPosition = (((double) currentPoint)/maxData * 20);
			if(numOfPoint > maxData && (currentPoint - startPoint) < maxData) {
				dataA.getData().set((currentPoint - startPoint), new XYChart.Data<Number, Number>((pointPosition),newPoint)); // change datapoint
			}
			else if(numOfPoint <= maxData && (currentPoint - startPoint) <= maxData){
				dataA.getData().add(new XYChart.Data<Number, Number>((pointPosition),newPoint)); // add new datapoint
			}
			
			
			if((currentPoint - startPoint) == maxData){
				updateDisplayValues();
			}
			oldMaxData = maxData;
		}
		
		//add data of channel B
		public static void addDataB(double newPoint,int startPoint, int maxData, int currentPoint, int tabFrom) {
			tab = tabFrom;
			//get number of datapoints
	        int numOfPoint = dataB.getData().size();
	        

			if(maxData < oldMaxData) {
				dataB.getData().remove(maxData, dataB.getData().size());
			}

			((ValueAxis<Number>) dataB.getChart().getXAxis()).setLowerBound(startPoint);
	        ((ValueAxis<Number>) dataB.getChart().getXAxis()).setUpperBound((double)(maxData - startPoint)/maxData * 20);
	        
			if(numOfPoint >= maxData && (currentPoint - startPoint) < maxData) {
				dataB.getData().set((currentPoint - startPoint), new XYChart.Data<Number, Number>(currentPoint,newPoint)); // add new datapoint
			}
			else if(numOfPoint <= maxData && (currentPoint - startPoint) <= maxData){
				dataB.getData().add(new XYChart.Data<Number, Number>(currentPoint,newPoint)); // add new datapoint
			}
			
			if((currentPoint - startPoint) == maxData){
				updateDisplayValues();
			}
			oldMaxData = maxData;
		}
		
		//update UI RMS and PtP values
		private static void updateDisplayValues () {
			
			if(dataA.getData().size()>0) {
				double[] response = calculate(dataA);
				if(tab == NoConUI) {
					NoConnectionUI.updateRMSA(Math.sqrt(response[0]/oldMaxData));
					NoConnectionUI.updatePtPA(response[1],response[2]);
				}
				else if(tab == OsciUI) {
					OscilloscopeUI.updateRMSA(Math.sqrt(response[0]/oldMaxData));
					OscilloscopeUI.updatePtPA(response[1],response[2]);
				}
			}
			if(dataB.getData().size()>0) {
			
				double[] response = calculate(dataB);
				if(tab == NoConUI) {
					NoConnectionUI.updateRMSB(Math.sqrt(response[0]/oldMaxData));
					NoConnectionUI.updatePtPB(response[1],response[2]);
				}
				else if(tab == OsciUI) {
					OscilloscopeUI.updateRMSB(Math.sqrt(response[0]/oldMaxData));
					OscilloscopeUI.updatePtPB(response[1],response[2]);
				}
			}
		}
		
		//calculate values for RMS and PtP
		private static double[] calculate(XYChart.Series<Number, Number> data ) {
			double[] response = new double[3];
			sum = 0;
			max = (double) data.getData().get(0).getYValue();
			min = (double) data.getData().get(0).getYValue();
			data.getData().forEach(value-> {
				sum += ((double) value.getYValue()*(double) value.getYValue());
				if((double) value.getYValue() > max)
					max = (double)value.getYValue();
				if((double) value.getYValue() < min)
					min = (double)value.getYValue();
			});
			response[0] = sum;
			response[1] = max;
			response[2] = min;
			return response;
		}
		
		//update the YAxis limits
		public static void updateYAxis(int attenuation) {
			if(attenuation == 10) {
				((ValueAxis<Number>) dataA.getChart().getYAxis()).setLowerBound(16.5);
				((ValueAxis<Number>) dataA.getChart().getYAxis()).setLowerBound(-16.5);
			}
			else if(attenuation == 5) {
				((ValueAxis<Number>) dataA.getChart().getYAxis()).setLowerBound(9);
				((ValueAxis<Number>) dataA.getChart().getYAxis()).setLowerBound(-9);
			}
			else if(attenuation == 2) {
				((ValueAxis<Number>) dataA.getChart().getYAxis()).setLowerBound(3.3);
				((ValueAxis<Number>) dataA.getChart().getYAxis()).setLowerBound(-3.3);
			}
			else if(attenuation == 1) {
				((ValueAxis<Number>) dataA.getChart().getYAxis()).setLowerBound(1.6);
				((ValueAxis<Number>) dataA.getChart().getYAxis()).setLowerBound(-1.6);
			}
		}
		
		//clear graph
		public static void clearGraph() {
			dataA.getData().clear();
			dataB.getData().clear();
		}
		
		public static void clearGraphA() {
			dataA.getData().clear();
		}
		
		public static void clearGraphB() {
			dataB.getData().clear();
		}
		
	}