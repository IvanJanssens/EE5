package userinterface;

import java.awt.image.BufferedImage;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;

import javax.imageio.ImageIO;

import javafx.embed.swing.SwingFXUtils;
import javafx.event.Event;
import javafx.event.EventHandler;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.chart.ValueAxis;
import javafx.scene.control.Alert;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.ScrollPane;
import javafx.scene.control.Separator;
import javafx.scene.control.Tab;
import javafx.scene.control.Alert.AlertType;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.image.WritableImage;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.VBox;
import javafx.stage.FileChooser;
import javafx.stage.FileChooser.ExtensionFilter;
import resource.ResourceLoader;

public class NoConnectionUI extends UI{

	public static Tab noConnection() {
		Tab noConnectionTab = new Tab();
		noConnectionTab.setText("Graph");
		ScrollPane osciPanel = new ScrollPane();
			osciPanel.setFitToHeight(true);
			osciPanel.setFitToWidth(true);
			osciPanel.setContent(noConBorderPane());
			noConnectionTab.setContent(osciPanel);
		return noConnectionTab;
	}
	
	private static BorderPane noConBorderPane() {
		BorderPane osciBorderPane = new BorderPane();
		HBox header = mainButtons();
		osciBorderPane.setTop(header);
		BorderPane.setMargin(header, new Insets(10,0,10,10));
		osciBody = osciBody();
		osciBorderPane.setCenter(osciBody);
		return osciBorderPane;
	}
	
	private static HBox mainButtons() {
		mainButtons = new HBox(10);
		mainButtons.setAlignment(Pos.CENTER_LEFT);
		mainButtons.getChildren().addAll(Load(),printScreen(),help());
		return mainButtons;
	}
	
	//open basic filechooser
		private static Button Load(){
			Button load = new Button("Load");
			load.setPrefWidth(120);
			load.setOnMouseClicked(new EventHandler<Event>() {
				@Override
				public void handle(Event e){
					FileChooser open = new FileChooser();
					open.setTitle("Load mesurements");
					open.getExtensionFilters().add(new ExtensionFilter("text","*.txt"));
					loadFile = open.showOpenDialog(null);
					if(loadFile != null){
						readFile(loadFile);
					}
						
				}
			});
			return load;
		}
		
		private static void readFile(File file) {
			data.getData().clear();
			int from = Integer.parseInt(dataFrom.getText());
			int till = Integer.parseInt(dataTill.getText());
			datapoint = from;
			max_data = till-from + 1;
			((ValueAxis<Number>) data.getChart().getXAxis()).setLowerBound(from);
	        ((ValueAxis<Number>) data.getChart().getXAxis()).setUpperBound(till);
	        BufferedReader in = null;
			try {
				in = new BufferedReader(new FileReader(file));
				int currentLineNo = 0;
				while(currentLineNo < from){
					if(in.readLine() == null) {
						throw new IOException("File too small");
					}
					currentLineNo++;
				}
				while(currentLineNo <= till) {
					System.out.println(currentLineNo);
					String nextLine = in.readLine();
					if(nextLine == null)
						return;
//					addData(Double.parseDouble(nextLine));
					currentLineNo++;
				}
			} catch (IOException ex) {
				System.out.println("Problem reading file" + ex.getMessage());
			} finally {
				try {
					if(in!=null)
						in.close();
				} catch(IOException ignore) {
					
				}
			}
		}
		
		private static Button printScreen() {
			Button printScreen = new Button("Printscreen");
			printScreen.setPrefWidth(120);
			printScreen.setOnMouseClicked(new EventHandler<Event>() {
				@Override
				public void handle(Event e){
					UI.cancelOsci(); // pause the inputstream of data during the snapshot
					FileChooser saving = new FileChooser();
					saving.setTitle("Printscreen");
					saving.getExtensionFilters().add(new ExtensionFilter("Png","*.png"));
					File selectedFile = saving.showSaveDialog(null);
					if(selectedFile != null){
						try {
							//get a snapshot of the oscibody, this includes the different buttons of the oscilloscope and the graph
				            WritableImage snapshot = osciBody.snapshot(null, null);
				            BufferedImage tempImg = SwingFXUtils.fromFXImage(snapshot, null);

				            ImageIO.write(tempImg, "png", selectedFile);
				            UI.startOsci(); // restart the inputstream

				        } catch (IOException ex) {
				            // TODO Auto-generated catch block
				            ex.printStackTrace();
				        }
					}
				}
			});
			return printScreen;
		}
		
		private static Button help() {
			Button help = new Button("Help");
			help.setPrefWidth(120);
			help.setOnMouseClicked(new EventHandler<Event>() {
				@Override
				public void handle(Event e) {
					UI.cancelOsci();
					Alert helpAlert = new Alert(AlertType.INFORMATION);
					helpAlert.setTitle("Help menu");
					helpAlert.setHeaderText("Help with the oscilloscope");
					helpAlert.getDialogPane().setPrefHeight(400);
					helpAlert.setResizable(true);
					helpAlert.getDialogPane().setContent(helpContent());

					helpAlert.showAndWait();
					UI.startOsci();
				}
			});
			return help;
		}
		
		private static ScrollPane helpContent() {
			ScrollPane helpContent = new ScrollPane();
			helpContent.setFitToWidth(true);
			VBox content = new VBox(10);
			content.getChildren().addAll(
					new Label("This is the graph of the data: "),new ImageView(new Image(ResourceLoader.class.getResourceAsStream("graph.png"),300,0,true,true)),
					new Separator(),
					new Label("Open data file to display on the graph: "),new ImageView(new Image(ResourceLoader.class.getResourceAsStream("open.png"),300,0,true,true)),
					new Separator(),
					new Label("Printscreen the graph and option selection to a PNG image: "),new ImageView(new Image(ResourceLoader.class.getResourceAsStream("print.png"),300,0,true,true)),
					new Separator(),
					new Label("Display Root Mean Square (RMS) value of the graph: "),new ImageView(new Image(ResourceLoader.class.getResourceAsStream("RMS.png"),200,0,true,true)),
					new Separator(),
					new Label("Display Peak to Peak value of the graph: "),new ImageView(new Image(ResourceLoader.class.getResourceAsStream("PtP.png"),200,0,true,true)));
			helpContent.setContent(content);
			
			return helpContent;
		}
}
