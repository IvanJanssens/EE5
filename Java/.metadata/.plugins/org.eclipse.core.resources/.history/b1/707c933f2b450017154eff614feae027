package userinterface;



import application.Main;
import application.Sync;

import java.util.Optional;
import java.util.logging.Level;
import java.util.function.Consumer;

import communication.Connection;
import gnu.io.CommPortIdentifier;
import javafx.event.Event;
import javafx.event.EventHandler;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.control.Button;
import javafx.scene.control.ButtonType;
import javafx.scene.control.ComboBox;
import javafx.scene.control.Dialog;
import javafx.scene.control.ListCell;
import javafx.scene.control.ListView;
import javafx.scene.control.ButtonBar.ButtonData;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.HBox;
import javafx.stage.Modality;
import javafx.util.Callback;

public class PicUI {
	private static ComboBox<CommPortIdentifier> combo;
	private static Connection connection = null;
	private static Sync sync;
	public static Connection start(Object param, Consumer<Object> onCancel) {
		
		sync = new Sync();
		sync.start();
		//create a dialog for the portselect
		Dialog<ButtonType> portSelect = new Dialog<>();
		combo = new ComboBox<CommPortIdentifier>();
		//get the different COM-port connections of the PC
		Connection.refresh();
		
		// create a refresh button for the connection list
		Button refreshPort = new Button("Refresh ports");
		refreshPort.setOnMouseClicked(new EventHandler<Event>() {
			@Override
			public void handle(Event arg0){
				combo.setItems(Connection.refresh());
			}
		});
		
		//create a select port
		Button selectPort = new Button("Select port");
		selectPort.setOnMouseClicked(new EventHandler<Event>() {
			@Override
			public void handle(Event arg0) {
				//if there is a COM-port selected create a new connection to that port
				//close the port-selector and start the main UI
				if(combo.getValue()!=null) {
					try {
						connection = Connection.getInstance();
						connection.initConnection(combo.getValue());
						connection.load();
						Connection.send(UI.STARTPIC);
						portSelect.setResult(ButtonType.FINISH);
					} catch (Exception ex) {
						Main.LOGGER.log(Level.SEVERE,"Couldn't start connection",ex);
					}
				}
				
			}
			
		});
		
		Button simpleStart = new Button("Start Without Pic");
		simpleStart.setOnMouseClicked(new EventHandler<Event>() {
			@Override
			public void handle(Event e) {
				connection = Main.NO_CONNECTION;
				portSelect.setResult(ButtonType.FINISH);
			}
		});
		
		//create a default cancel button
		ButtonType cancel = new ButtonType("Cancel Program",ButtonData.CANCEL_CLOSE);
		
		//add the buttons and combobox in a horizontal box, with 10px spacing
		HBox buttons = new HBox(10);
		buttons.getChildren().addAll(refreshPort,combo, selectPort,simpleStart);



		BorderPane main = new BorderPane();
		main.setBottom(buttons);
		BorderPane.setAlignment(buttons, Pos.CENTER);
		BorderPane.setMargin(buttons, new Insets(10,0,0,0));
		combo.setItems(Connection.refresh());
		//display custom text for the combobox
		combo.setButtonCell((ListCell<CommPortIdentifier>) cellFactory.call(null));
		combo.setCellFactory(cellFactory);
		
		
		//fill the dialog window with the different buttons and text
		portSelect.setHeaderText("Choose the port where your pic is connected");
		portSelect.setTitle("Choose port");
		portSelect.setResizable(true);
		portSelect.getDialogPane().setContent(main);
		portSelect.getDialogPane().getButtonTypes().add(cancel);
		portSelect.initModality(Modality.APPLICATION_MODAL);
		Optional<ButtonType> response = portSelect.showAndWait();
		if(cancel.equals(response.get())) {
			onCancel.accept(param);
		}
		return connection;
		
	}
	
	// Change standard value of combobox to portName + portType
	static Callback<ListView<CommPortIdentifier>,ListCell<CommPortIdentifier>> cellFactory = new Callback<ListView<CommPortIdentifier>,ListCell<CommPortIdentifier>>(){
	    @Override
	    public ListCell<CommPortIdentifier> call(ListView<CommPortIdentifier> l){
	        return new ListCell<CommPortIdentifier>(){
	            @Override
	            protected void updateItem(CommPortIdentifier port, boolean empty) {
	                super.updateItem(port, empty);
	                if (port == null || empty) {
	                    setGraphic(null);
	                } else {
	                    setText(port.getName()+"    "+getPortTypeName(port.getPortType()));
	                }
	            }
	        };
	    }
	};
	
	//return string of port type
	static String getPortTypeName ( int portType ){
        switch ( portType )
        {
            case CommPortIdentifier.PORT_I2C:
                return "I2C";
            case CommPortIdentifier.PORT_PARALLEL:
                return "Parallel";
            case CommPortIdentifier.PORT_RAW:
                return "Raw";
            case CommPortIdentifier.PORT_RS485:
                return "RS485";
            case CommPortIdentifier.PORT_SERIAL:
                return "Serial";
            default:
                return "unknown type";
        }
    }
}
