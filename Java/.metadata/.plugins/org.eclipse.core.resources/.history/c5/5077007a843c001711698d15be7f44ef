package userinterface;

import communication.Connection;
import javafx.event.ActionEvent;
import javafx.event.Event;
import javafx.event.EventHandler;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.control.Alert;
import javafx.scene.control.Button;
import javafx.scene.control.ButtonBase;
import javafx.scene.control.Label;
import javafx.scene.control.RadioButton;
import javafx.scene.control.ScrollPane;
import javafx.scene.control.Separator;
import javafx.scene.control.Spinner;
import javafx.scene.control.SpinnerValueFactory;
import javafx.scene.control.Tab;
import javafx.scene.control.ToggleButton;
import javafx.scene.control.ToggleGroup;
import javafx.scene.control.Alert.AlertType;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.VBox;
import resource.ResourceLoader;

public class GeneratorUI {

	private static ToggleGroup waveType;
	private static Spinner<Integer> freqField;
	private static int oldValue;
	
	public static Tab generator() {
		Tab generator = new Tab();
		generator.setText("Function generator");
		ScrollPane genePanel = new ScrollPane();
		genePanel.setFitToHeight(true);
		genePanel.setFitToWidth(true);
		genePanel.setContent(geneBorderPane());
		generator.setContent(genePanel);
		return generator;
	}
	
	private static BorderPane geneBorderPane() {
		BorderPane geneBorderPane = new BorderPane();
		HBox header = geneButton();
		geneBorderPane.setTop(header);
		BorderPane.setMargin(header, new Insets(10,0,10,10));
		BorderPane geneBody = geneBody();
		geneBorderPane.setCenter(geneBody);
		return geneBorderPane;
		
	}
	
	private static HBox geneButton() {
		HBox mainButtons = new HBox(10);
		mainButtons.setAlignment(Pos.CENTER_LEFT);
		mainButtons.getChildren().add(help());
		return mainButtons;
	}
	
	private static Button help() {
		Button help = new Button("help");
		help.setPrefWidth(120);
		help.setOnMouseClicked(new EventHandler<Event>() {
			@Override
			public void handle(Event e) {
				Alert helpAlert = new Alert(AlertType.INFORMATION);
				helpAlert.setTitle("Help menu");
				helpAlert.setHeaderText("Help with the generator");
				helpAlert.getDialogPane().setPrefHeight(400);
				helpAlert.setResizable(true);
				helpAlert.getDialogPane().setContent(helpContent());

				helpAlert.showAndWait();
			}
		});
		return help;
	}
	
	private static ScrollPane helpContent() {
		ScrollPane helpContent = new ScrollPane();
		helpContent.setFitToWidth(true);
		VBox content = new VBox(10);
		content.getChildren().addAll(new Label("Select waveform, Sine or Square: "),new ImageView(new Image(ResourceLoader.class.getResourceAsStream("wave.png"),300,0,true,true)), new Separator(), new Label("Select the frequency of the waveform: "),new ImageView(new Image(ResourceLoader.class.getResourceAsStream("frequency.png"),500,0,true,true)));
		helpContent.setContent(content);
		
		return helpContent;
	}
	
	private static BorderPane geneBody() {
		BorderPane geneBody = new BorderPane();
		VBox generator = new VBox(10);
		generator.setAlignment(Pos.TOP_CENTER);
		
		generator.getChildren().addAll(wave(),freq());
		geneBody.setCenter(generator);
		return geneBody;
	}
	
	private static HBox wave() {
		HBox wave = new HBox(50);
		wave.setAlignment(Pos.TOP_CENTER);
		RadioButton sine = new RadioButton();
		sine.setGraphic(new ImageView(new Image(ResourceLoader.class.getResourceAsStream("SineWave.png"),100,0,true,false)));
		sine.setUserData("sine");
		RadioButton square = new RadioButton();
		square.setGraphic(new ImageView(new Image(ResourceLoader.class.getResourceAsStream("SquareWave.png"),100,0,true,false)));
		square.setUserData("square");
		waveType = new ToggleGroup();
		sine.setToggleGroup(waveType);
		square.setToggleGroup(waveType);
		waveType.selectToggle(sine);
		sine.setDisable(true);
		waveType.selectedToggleProperty().addListener((obs, oldToggle, newToggle) -> {
				sendGenerator();
				((ToggleButton) newToggle).setDisable(true);
				((ToggleButton) oldToggle).setDisable(false);
				});
		wave.getChildren().addAll(sine, square);
		return wave;
	}
	
	private static VBox freq() {
		freqField = new Spinner<Integer>();
		freqField.setValueFactory(new SpinnerValueFactory.IntegerSpinnerValueFactory(10,1000000,1000,10));
		freqField.setEditable(true);
		oldValue = freqField.getValue();
		freqField.valueProperty().addListener((observable,oldValue,newValue) -> { //needed to update value if typed in (not automatically with spinner)
			if(newValue == null) {
				System.out.println("update");
				freqField.increment(0);
			}
		});
		freqField.getEditor().setOnAction(new EventHandler<ActionEvent>() {
			@Override
			public void handle(ActionEvent e) {
				oldValue = freqField.getValue();
				sendGenerator();
			}
		});
		
		freqField.setOnMouseClicked(new EventHandler<Event> () {
			@Override
			public void handle(Event e) {
				if(freqField.getValue() != oldValue) {
					oldValue = freqField.getValue();
					sendGenerator();
				}
			}
		});

		VBox freq = new VBox(20);	
		freq.setAlignment(Pos.TOP_CENTER);
		freq.getChildren().addAll(freqField);
		return freq;
	}

	
	public static void sendGenerator() {
		sendFreq();
		sendWave();
	}
	
	private static void sendFreq() {
		int freq = freqField.getValue();
		System.out.println(freq);
		byte message = 0b00000000;
		message = (byte) (message | (freq & 0x07));
		Connection.send(message);
		
		
		message = 0b00001000;
		message = (byte) (message | ((freq>>>3) & 0x07));
		Connection.send(message);
		
		
		message = 0b00010000;
		message = (byte) (message | ((freq>>>6) & 0x07));
		Connection.send(message);
		
		
		message = 0b00011000;
		message = (byte) (message | ((freq>>>9) & 0x07));
		Connection.send(message);
		
		
		message = 0b00100000;
		message = (byte) (message | ((freq>>>12) & 0x07));
		Connection.send(message);
		
		message = 0b00101000;
		message = (byte) (message | ((freq>>>15) & 0x07));
		Connection.send(message);
		
		message = 0b00110000;
		message = (byte) (message | ((freq>>>18) & 0x07));
		Connection.send(message); 
	}
	
	private static void sendWave() {
		byte message = 0b00111000; //start with wave type
		if(waveType.getSelectedToggle().getUserData().equals("sine")) {
			message = setBit(message,0);
		}
		Connection.send(message);
	}
	
	private static byte setBit(byte message, int pos) {
		return message |= 1 << pos;
	}
	
	private static byte clearBit(byte message, int pos) {
		return message &= ~(1<<pos);
	}
}
